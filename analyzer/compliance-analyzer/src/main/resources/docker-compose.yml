version: '3.4'

services:

  ##################
  # InitContainers #
  ##################

  # Clones the repository
  repo-cloner:
    image: alpine/git:v2.26.2
    entrypoint: [ "sh", "-c" ]
    command:
      - |
        set -e

        # Cloning the repository
        git clone --verbose $${REPOSITORY_URL} /home/git/buildroot/project
        echo "...cloning done."

        # Fixing shared volume permissions
        echo "Assigning shared volume to $${SHARED_VOLUME_USER}..."
        chown -R $${SHARED_VOLUME_USER} /home/git/buildroot
        echo "...shared volume assigned to $${SHARED_VOLUME_USER}."
    environment:
      - REPOSITORY_URL
      - SHARED_VOLUME_USER=1000:1000 # who will own the shared volume
    volumes:
      - buildroot-volume:/home/git/buildroot

  # Pom patcher
  pom-patcher:
    image: endocodeci/pom-patch:sha-c47d6c5
    depends_on:
      - repo-cloner
    entrypoint: [ "sh", "-c" ]
    command:
      - |
        set -e

        # Moving to the repository folder: counting files & directories (including hidden ones) will be easier
        cd /home/configure/buildroot/project

        # Counting files & directories (including hidden ones) of the project being cloned.
        # If < 2 (only the `.git` folder is present), cloning has not terminated
        while [ "$$(find . ! -name . -prune -print | grep -c /)" -lt 2 ]; do
          echo "...still cloning..."
          sleep 2
        done
        echo "...repository has been cloned."

        # Patching the pom.xml file
        echo "Patching the pom.xml file..."
        cd /home/configure
        if python -q insert-build-plugin.py qmstr-maven-plugin.xml > /dev/null; then
          echo "...pom.xml file patched successfully."
        else
          echo "...pom.xml file patching failed."
          exit $$?
        fi
    volumes:
      - buildroot-volume:/home/configure/buildroot

  ##################################################################################################
  # DGraph                                                                                         #
  # From: https://github.com/dgraph-io/dgraph/blob/master/contrib/config/docker/docker-compose.yml #
  ##################################################################################################

  zero:
    image: dgraph/dgraph:v20.11.2
    ports:
      - 5080:5080
      - 6080:6080
    restart: on-failure
    entrypoint: [ "bash", "-c" ]
    command:
      - |
        set -ex
        dgraph zero --my=zero:5080
  alpha:
    image: dgraph/dgraph:v20.11.2
    ports:
      - 8080:8080
      - 9080:9080
    restart: on-failure
    entrypoint: [ "bash", "-c" ]
    command:
      - |
        set -e
        dgraph alpha --whitelist 0.0.0.0/0 --my=alpha:7080 --zero=zero:5080 --lru_mb 2048
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
  ratel:
    image: dgraph/dgraph:v20.11.2
    ports:
      - 8000:8000
    command: dgraph-ratel

  #################
  # Quartermaster #
  #################

  master:
    image: endocodeci/qmstr-master:sha-77f2904
    depends_on:
      # Cloned & patched repository
      - repo-cloner
      - pom-patcher
      # DGraph
      - zero
      - alpha
      - ratel
    entrypoint: [ "sh", "-c" ]
    command:
      - |
        set -e
        set -x

        # Moving to the repository folder: counting files & directories (including hidden ones) will be easier
        cd /var/qmstr/buildroot/project

        # Counting files & directories (including hidden ones) of the project being cloned.
        # If < 2 (only the `.git` folder is present), cloning has not terminated
        while [ "$$(find . ! -name . -prune -print | grep -c /)" -lt 2 ]; do
          echo "...still cloning..."
          sleep 2
        done
        echo "...repository has been cloned."

        # Checking whether the repository has been already patched or not
        while [ -z \"$$(cat /var/qmstr/buildroot/project/pom.xml | grep -i \"qmstr\")\" ]; do
          echo "...waiting for the pom.xml to be patched."
          sleep 3
        done
        echo "...the pom.xml file has been patched."

        # Waiting for DGraph alpha to be ready
        # python3 -c "import urllib.request as r; print(r.urlopen('http://alpha:8080/health'))"
        while [ "$$(python3 -c "import urllib.request as r; print(r.urlopen('http://alpha:8080/health').getcode())")" -ne 200 ]; do
          echo "...waiting for DGraph to be ready."
          sleep 3
        done
        echo "...DGraph is ready."

        # Start the master process
        /usr/local/bin/qmstr-master --config /home/qmstr/config/qmstr.yaml
    ports:
      - 50051:50051
    environment:
      - SERVER_BUILDPATH="/var/qmstr/buildroot"
    volumes:
      - ./analyzer/compliance-analyzer/src/main/resources/qmstr-config.yaml:/home/qmstr/config/qmstr.yaml
      - buildroot-volume:/var/qmstr/buildroot/

  client:
    image: endocode/qmstr-client-mvn:fasten-reporter-curl
    depends_on:
      # Master
      - master
      # Cloned & patched repository
      - repo-cloner
      - pom-patcher
      # DGraph
      - zero
      - alpha
      - ratel
    entrypoint: [ "sh", "-c" ]
    command:
      - |
        set -e
        set -x

        # Moving to the repository folder: counting files & directories (including hidden ones) will be easier
        cd /var/qmstr/buildroot/project

        # Counting files & directories (including hidden ones) of the project being cloned.
        # If < 2 (only the `.git` folder is present), cloning has not terminated
        while [ "$$(find . ! -name . -prune -print | grep -c /)" -lt 2 ]; do
          echo "...still cloning..."
          sleep 2
        done
        echo "...repository has been cloned."

        # Checking whether the repository has been already patched or not
        while [ -z \"$$(cat /var/qmstr/buildroot/project/pom.xml | grep -i \"qmstr\")\" ]; do
          echo "...waiting for the pom.xml to be patched."
          sleep 3
        done
        echo "The pom.xml file has been patched."

        # Waiting for DGraph alpha to be ready
        # python3 -c "import urllib.request as r; print(r.urlopen('http://alpha:8080/health'))"
        while [ "$$(python3 -c "import urllib.request as r; print(r.urlopen('http://alpha:8080/health').getcode())")" -ne 200 ]; do
          echo "...waiting for DGraph to be ready."
          sleep 3
        done
        echo "...DGraph is ready."

        # Building the project
        mvn package -Dmaven.test.skip=true

        # Analyzing licenses
        touch ../scancode.json
        chmod 777 ../scancode.json
        qmstrctl analyze --verbose
    environment:
      - QMSTRADDRENV=master:50051
      - QMSTR_MASTER=master:50051
      - BUILDROOT=/var/qmstr/buildroot
    volumes:
      - buildroot-volume:/var/qmstr/buildroot

volumes:
  buildroot-volume:
